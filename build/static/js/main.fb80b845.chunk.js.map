{"version":3,"sources":["axios.js","Requests.js","Banner.js","Nav.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/PlansScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlansScreen","products","setProducts","useSelector","subscription","setSubscription","collection","doc","uid","querySnapshot","forEach","role","current_period_end","seconds","current_period_start","where","productDoc","docs","price","prices","priceId","priceData","loadCheckout","add","success_url","location","origin","cancel_url","onSnapshot","snap","sessionId","loadStripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","productId","productData","isCurrentPackage","toLowerCase","includes","description","ProfileScreen","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","path","exact","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kcAMeA,E,OAJEC,EAAMC,OAAO,CAC5BC,QAAS,iCCHLC,EAAU,mCAaDC,EAXE,CACfC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,OC4CLU,MAjDf,WAAmB,IAkBCC,EAAQC,EAlBV,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,KAsBhB,OAnBAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBpB,EAAMqB,IAAIjB,EAASE,uBAD3C,cACQgB,EADR,OAEEJ,EACEI,EAAQC,KAAKC,QACXC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQC,KAAKC,QAAQI,OAAS,KAJ/D,kBAOSN,GAPT,4CADc,uBAAC,WAAD,wBAUdO,KACC,IAEHC,QAAQC,IAAId,GAOV,yBACEe,UAAU,SACVC,MAAO,CACLC,eAAgB,QAChBC,gBAAgB,4CAAD,cAA8ClB,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAOmB,cAArD,MACfC,mBAAoB,iBALxB,UAQE,sBAAKL,UAAU,mBAAf,UACE,oBAAIA,UAAU,gBAAd,UACQ,OAALf,QAAK,IAALA,OAAA,EAAAA,EAAOqB,SAAP,OAAgBrB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOsB,QAAvB,OAA+BtB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOuB,iBAEzC,sBAAKR,UAAU,kBAAf,UACE,wBAAQA,UAAU,iBAAlB,kBACA,wBAAQA,UAAU,iBAAlB,wBAEF,oBAAIA,UAAU,sBAAd,UArBYlB,EAsBD,OAACG,QAAD,IAACA,OAAD,EAACA,EAAOwB,SAtBC1B,EAsBS,KArBpB,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQc,QAASb,EAAID,EAAO4B,OAAO,EAAG3B,EAAI,GAAK,MAAQD,QAyB5D,qBAAKkB,UAAU,2B,qBCPNW,MAtCf,WAAgB,IAAD,EACc3B,oBAAS,GADvB,mBACN4B,EADM,KACAC,EADA,KAEPC,EAAUC,cAEVC,EAAmB,WACnBC,OAAOC,QAAU,IACnBL,GAAW,GAEXA,GAAW,IASf,OALA1B,qBAAU,WAER,OADA8B,OAAOE,iBAAiB,SAAUH,GAC3B,kBAAMC,OAAOG,oBAAoB,SAAUJ,MACjD,IAGD,qBAAKhB,UAAS,cAASY,GAAQ,cAA/B,SACE,sBAAKZ,UAAU,gBAAf,UACE,qBACEqB,QAAS,kBAAMP,EAAQQ,KAAK,MAC5BtB,UAAU,YACVuB,IAAI,iEACJC,IAAI,KAGN,qBACEH,QAAS,kBAAMP,EAAQQ,KAAK,aAC5BtB,UAAU,cACVuB,IAAI,gFACJC,IAAI,W,MCOCC,MAtCf,YAAuD,IAAxCnB,EAAuC,EAAvCA,MAAOoB,EAAgC,EAAhCA,SAAgC,IAAtBC,kBAAsB,WACxB3C,mBAAS,IADe,mBAC7C4C,EAD6C,KACrCC,EADqC,KAcpD,OATA1C,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBpB,EAAMqB,IAAIqC,GADlC,cACQpC,EADR,OAEEuC,EAAUvC,EAAQC,KAAKC,SAFzB,kBAGSF,GAHT,4CADc,uBAAC,WAAD,wBAMdO,KACC,CAAC6B,IAGF,sBAAK1B,UAAU,MAAf,UACE,6BAAKM,IAEL,qBAAKN,UAAU,eAAf,SACG4B,EAAOE,KACN,SAAC7C,GAAD,OACI0C,GAAc1C,EAAM8C,cAClBJ,GAAc1C,EAAMmB,gBACtB,qBACEJ,UAAS,sBAAiB2B,GAAc,oBAExCJ,IAAG,UAvBA,wCAuBA,OACDI,EAAa1C,EAAM8C,YAAc9C,EAAMmB,eAEzCoB,IAAKvC,EAAMsB,MAJNtB,EAAM+C,aCEZC,MAxBf,WACE,OACE,sBAAKjC,UAAU,aAAf,UACE,cAAC,EAAD,IAEA,cAAC,EAAD,IAEA,cAAC,EAAD,CACEM,MAAM,oBACNoB,SAAUtD,EAASE,sBACnBqD,YAAU,IAGZ,cAAC,EAAD,CAAKrB,MAAM,eAAeoB,SAAUtD,EAASC,gBAC7C,cAAC,EAAD,CAAKiC,MAAM,YAAYoB,SAAUtD,EAASG,gBAC1C,cAAC,EAAD,CAAK+B,MAAM,gBAAgBoB,SAAUtD,EAASI,oBAC9C,cAAC,EAAD,CAAK8B,MAAM,gBAAgBoB,SAAUtD,EAASK,oBAC9C,cAAC,EAAD,CAAK6B,MAAM,gBAAgBoB,SAAUtD,EAASM,oBAC9C,cAAC,EAAD,CAAK4B,MAAM,iBAAiBoB,SAAUtD,EAASO,qBAC/C,cAAC,EAAD,CAAK2B,MAAM,gBAAgBoB,SAAUtD,EAASQ,yB,wBCd9CsD,EADcC,IAASC,cATN,CACrBC,OAAQ,0CACRC,WAAY,sCACZC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAIcC,YACjBC,EAAOT,IAASS,OAGPV,I,MC4CAW,MAxDf,WACE,IAAMC,EAAWC,iBAAO,MAClBC,EAAcD,iBAAO,MAkC3B,OACE,qBAAK/C,UAAU,eAAf,SACE,iCACE,yCACA,uBAAOiD,IAAKH,EAAUI,YAAY,QAAQC,KAAK,UAC/C,uBAAOF,IAAKD,EAAaE,YAAY,WAAWC,KAAK,aACrD,wBAAQA,KAAK,SAAS9B,QAtBb,SAAC+B,GACdA,EAAEC,iBAEFT,EACGU,2BACCR,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OAErBC,MAAK,SAACC,GACL5D,QAAQC,IAAI2D,MAEbC,OAAM,SAACC,GACNC,MAAMD,EAAME,aAUZ,qBAGA,+BACE,sBAAM9D,UAAU,qBAAhB,8BAA6D,IAC7D,sBAAMA,UAAU,qBAAqBqB,QA3C5B,SAAC+B,GAChBA,EAAEC,iBAEFT,EACGmB,+BACCjB,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OAErBC,MAAK,SAACC,GACL5D,QAAQC,IAAI2D,MAEbC,OAAM,SAACC,GACNC,MAAMD,EAAME,aA+BV,mCCAKE,MA/Cf,WAAwB,IAAD,EACOhF,oBAAS,GADhB,mBACdiF,EADc,KACNC,EADM,KAGrB,OACE,sBAAKlE,UAAU,cAAf,UACE,sBAAKA,UAAU,0BAAf,UACE,qBACEA,UAAU,oBACVuB,IAAI,kEACJC,IAAI,KAEN,wBAAQH,QAAS,kBAAM6C,GAAU,IAAOlE,UAAU,sBAAlD,qBAIA,qBAAKA,UAAU,6BAGjB,qBAAKA,UAAU,oBAAf,SACGiE,EACC,cAAC,EAAD,IAEA,qCACE,0EACA,qEACA,wGAIA,qBAAKjE,UAAU,qBAAf,SACE,iCACE,uBAAOmD,KAAK,QAAQD,YAAY,kBAChC,wBACE7B,QAAS,kBAAM6C,GAAU,IACzBlE,UAAU,0BAFZ,uC,gBClCHmE,EAAYC,YAAY,CACnC7D,KAAM,OACN8D,aAAc,CACZC,KAAM,MAERC,SAAU,CACRC,MAAO,SAACC,EAAOC,GACbD,EAAMH,KAAOI,EAAOC,SAEtBC,OAAQ,SAACH,GACPA,EAAMH,KAAO,S,EAKcH,EAAUU,QAA5BL,E,EAAAA,MAAOI,E,EAAAA,OAETE,EAAa,SAACL,GAAD,OAAWA,EAAMH,KAAKA,MAEjCH,IAAf,Q,sBC0GeY,MAxHf,WAAwB,IAAD,EACW/F,mBAAS,IADpB,mBACdgG,EADc,KACJC,EADI,KAEfX,EAAOY,YAAYJ,GAFJ,EAGmB9F,mBAAS,MAH5B,mBAGdmG,EAHc,KAGAC,EAHA,KAKrBjG,qBAAU,WACR+C,EAAGmD,WAAW,aACXC,IAAIhB,EAAKiB,KACTF,WAAW,iBACXhG,MACAoE,MAAK,SAAC+B,GACLA,EAAcC,QAAd,uCAAsB,WAAON,GAAP,SAAA/F,EAAA,sDACpBgG,EAAgB,CACdM,KAAMP,EAAa5F,OAAOmG,KAC1BC,mBAAoBR,EAAa5F,OAAOoG,mBAAmBC,QAC3DC,qBAAsBV,EAAa5F,OAAOsG,qBACvCD,UALe,2CAAtB,4DASH,CAACtB,EAAKiB,MAETpG,qBAAU,WACR+C,EAAGmD,WAAW,YACXS,MAAM,SAAU,MAAM,GACtBzG,MACAoE,MAAK,SAAC+B,GACL,IAAMR,EAAW,GACjBQ,EAAcC,QAAd,uCAAsB,WAAOM,GAAP,SAAA3G,EAAA,6DACpB4F,EAASe,EAAW/D,IAAM+D,EAAWxG,OADjB,SAEIwG,EAAW9C,IAAIoC,WAAW,UAAUhG,MAFxC,cAGV2G,KAAKP,SAAQ,SAACQ,GACtBjB,EAASe,EAAW/D,IAAIkE,OAAS,CAC/BC,QAASF,EAAMjE,GACfoE,UAAWH,EAAM1G,WAND,2CAAtB,uDAUA0F,EAAYD,QAEf,IAEHlF,QAAQC,IAAIiF,GACZlF,QAAQC,IAAIoF,GAEZ,IAAMkB,EAAY,uCAAG,WAAOF,GAAP,SAAA/G,EAAA,sEACE8C,EAClBmD,WAAW,aACXC,IAAIhB,EAAKiB,KACTF,WAAW,qBACXiB,IAAI,CACHL,MAAOE,EACPI,YAAatF,OAAOuF,SAASC,OAC7BC,WAAYzF,OAAOuF,SAASC,SARb,cAWZE,WAAP,uCAAkB,WAAOC,GAAP,mBAAAxH,EAAA,2DACawH,EAAKrH,OAA1BqE,EADQ,EACRA,MAAOiD,EADC,EACDA,UAEXjD,GAGFC,MAAM,qBAAD,OAAsBD,EAAME,WAG/B+C,EATY,gCAaOC,YACnB,+GAdY,cAgBPC,mBAAmB,CAAEF,cAhBd,2CAAlB,uDAXmB,2CAAH,sDAgClB,OACE,sBAAK7G,UAAU,cAAf,UACE,uBACCmF,GACC,8CACgB,IACb,IAAI6B,KACgC,KAAvB,OAAZ7B,QAAY,IAAZA,OAAA,EAAAA,EAAcQ,qBACdsB,wBAGLC,OAAOC,QAAQnC,GAAUlD,KAAI,YAA+B,IAAD,qBAA5BsF,EAA4B,KAAjBC,EAAiB,KAEpDC,EAAgB,UAAGD,EAAY9G,YAAf,aAAG,EACrBgH,cACDC,SAFsB,OAEbrC,QAFa,IAEbA,OAFa,EAEbA,EAAcO,MAE1B,OACE,sBAEE1F,UAAS,UACPsH,GAAoB,8BADb,sBAFX,UAME,sBAAKtH,UAAU,oBAAf,UACE,6BAAKqH,EAAY9G,OACjB,6BAAK8G,EAAYI,iBAGnB,wBACEpG,QAAS,kBACNiG,GAAoBjB,EAAagB,EAAYnB,OAAOC,UAFzD,SAKGmB,EAAmB,kBAAoB,gBAfrCF,UC9DFM,MAjCf,WACE,IAAMpD,EAAOY,YAAYJ,GAEzB,OACE,sBAAK9E,UAAU,gBAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,sBAAf,UACE,8CACA,sBAAKA,UAAU,sBAAf,UACE,qBACEuB,IAAI,gFACJC,IAAI,KAEN,sBAAKxB,UAAU,yBAAf,UACE,6BAAKsE,EAAKqD,QACV,sBAAK3H,UAAU,uBAAf,UACE,uCAEA,cAAC,EAAD,IACA,wBACEqB,QAAS,kBAAMuB,EAAKgF,WACpB5H,UAAU,yBAFZ,sCC0BC6H,MA3Cf,WACE,IAAMvD,EAAOY,YAAYJ,GACnBgD,EAAWC,cAqBjB,OAnBA5I,qBAAU,WAgBR,OAfoByD,EAAKoF,oBAAmB,SAACC,GAGzCH,EAFEG,EAGAzD,EAAM,CACJe,IAAK0C,EAAS1C,IACdoC,MAAOM,EAASN,QAKX/C,UAKZ,CAACkD,IAGF,qBAAK9H,UAAU,MAAf,SACE,cAAC,IAAD,UACIsE,EAGA,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4D,KAAK,WAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACE,cAAC,EAAD,SAPJ,cAAC,EAAD,SClCKE,cAAe,CAC5BC,QAAS,CACP/D,KAAMgE,KCOUC,QACW,cAA7BtH,OAAOuF,SAASgC,UAEe,UAA7BvH,OAAOuF,SAASgC,UAEhBvH,OAAOuF,SAASgC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzF,MAAK,SAAA0F,GACjCA,EAAaC,kB","file":"static/js/main.fb80b845.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","const API_KEY = \"4354702c2331989a7b61c60ca70863a6\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Banner.css\";\nimport axios from \"./axios\";\nimport requests from \"./Requests\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n\n  function truncate(string, n) {\n    return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleShow] = useState(false);\n  const history = useHistory();\n\n  const transitionNavBar = () => {\n    if (window.scrollY > 100) {\n      handleShow(true);\n    } else {\n      handleShow(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", transitionNavBar);\n    return () => window.removeEventListener(\"scroll\", transitionNavBar);\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <div className=\"nav__contents\">\n        <img\n          onClick={() => history.push(\"/\")}\n          className=\"nav__logo\"\n          src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n          alt=\"\"\n        />\n\n        <img\n          onClick={() => history.push(\"/profile\")}\n          className=\"nav__avatar\"\n          src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n          alt=\"\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n  const [movies, setMovies] = useState([]);\n\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n        {movies.map(\n          (movie) =>\n            ((isLargeRow && movie.poster_path) ||\n              (!isLargeRow && movie.backdrop_path)) && (\n              <img\n                className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                key={movie.id}\n                src={`${base_url}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n              />\n            )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","import React from \"react\";\nimport Banner from \"../Banner\";\nimport \"./HomeScreen.css\";\nimport Nav from \"../Nav\";\nimport requests from \"../Requests\";\nimport Row from \"../Row\";\n\nfunction HomeScreen() {\n  return (\n    <div className=\"homeScreen\">\n      <Nav />\n\n      <Banner />\n\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default HomeScreen;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDSC0ZqjCNoBOPi3NF4GxxrXWPm5wOZtTs\",\n  authDomain: \"netflix-clone-394d3.firebaseapp.com\",\n  projectId: \"netflix-clone-394d3\",\n  storageBucket: \"netflix-clone-394d3.appspot.com\",\n  messagingSenderId: \"528644598039\",\n  appId: \"1:528644598039:web:5bed414b748ebd61246f52\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\n\nexport { auth };\nexport default db;\n","import React, { useRef } from \"react\";\nimport { auth } from \"../firebase\";\nimport \"./SignupScreen.css\";\n\nfunction SignupScreen() {\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n\n  const register = (e) => {\n    e.preventDefault();\n\n    auth\n      .createUserWithEmailAndPassword(\n        emailRef.current.value,\n        passwordRef.current.value\n      )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n  };\n\n  const signIn = (e) => {\n    e.preventDefault();\n\n    auth\n      .signInWithEmailAndPassword(\n        emailRef.current.value,\n        passwordRef.current.value\n      )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n  };\n\n  return (\n    <div className=\"signupScreen\">\n      <form>\n        <h1>Sign In</h1>\n        <input ref={emailRef} placeholder=\"Email\" type=\"email\" />\n        <input ref={passwordRef} placeholder=\"Password\" type=\"password\" />\n        <button type=\"submit\" onClick={signIn}>\n          Sign In\n        </button>\n        <h4>\n          <span className=\"signupScreen__gray\">New to Netflix? </span>{\" \"}\n          <span className=\"signupScreen__link\" onClick={register}>\n            Sign up now.\n          </span>\n        </h4>\n      </form>\n    </div>\n  );\n}\n\nexport default SignupScreen;\n","import React, { useState } from \"react\";\nimport \"./LoginScreen.css\";\nimport SignupScreen from \"./SignupScreen\";\n\nfunction LoginScreen() {\n  const [signIn, setSignIn] = useState(false);\n\n  return (\n    <div className=\"loginScreen\">\n      <div className=\"loginScreen__background\">\n        <img\n          className=\"loginScreen__logo\"\n          src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n          alt=\"\"\n        />\n        <button onClick={() => setSignIn(true)} className=\"loginScreen__button\">\n          Sign In\n        </button>\n\n        <div className=\"loginScreen__gradient\" />\n      </div>\n\n      <div className=\"loginScreen__body\">\n        {signIn ? (\n          <SignupScreen />\n        ) : (\n          <>\n            <h1>Unlimited films, TV programmes and more.</h1>\n            <h2>Watch anywhere. Cancel at any time.</h2>\n            <h3>\n              Ready to watch? Enter your email to create or restart your\n              membership.\n            </h3>\n            <div className=\"loginScreen__input\">\n              <form>\n                <input type=\"email\" placeholder=\"Email Address\" />\n                <button\n                  onClick={() => setSignIn(true)}\n                  className=\"loginScreen__getStarted\"\n                >\n                  Get Started\n                </button>\n              </form>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default LoginScreen;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport db from \"../firebase\";\nimport \"./PlansScreen.css\";\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nfunction PlansScreen() {\n  const [products, setProducts] = useState([]);\n  const user = useSelector(selectUser);\n  const [subscription, setSubscription] = useState(null);\n\n  useEffect(() => {\n    db.collection(\"customers\")\n      .doc(user.uid)\n      .collection(\"subscriptions\")\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach(async (subscription) => {\n          setSubscription({\n            role: subscription.data().role,\n            current_period_end: subscription.data().current_period_end.seconds,\n            current_period_start: subscription.data().current_period_start\n              .seconds,\n          });\n        });\n      });\n  }, [user.uid]);\n\n  useEffect(() => {\n    db.collection(\"products\")\n      .where(\"active\", \"==\", true)\n      .get()\n      .then((querySnapshot) => {\n        const products = {};\n        querySnapshot.forEach(async (productDoc) => {\n          products[productDoc.id] = productDoc.data();\n          const priceSnap = await productDoc.ref.collection(\"prices\").get();\n          priceSnap.docs.forEach((price) => {\n            products[productDoc.id].prices = {\n              priceId: price.id,\n              priceData: price.data(),\n            };\n          });\n        });\n        setProducts(products);\n      });\n  }, []);\n\n  console.log(products);\n  console.log(subscription);\n\n  const loadCheckout = async (priceId) => {\n    const docRef = await db\n      .collection(\"customers\")\n      .doc(user.uid)\n      .collection(\"checkout_sessions\")\n      .add({\n        price: priceId,\n        success_url: window.location.origin,\n        cancel_url: window.location.origin,\n      });\n\n    docRef.onSnapshot(async (snap) => {\n      const { error, sessionId } = snap.data();\n\n      if (error) {\n        // Show an error to your customer and\n        // inspect your cloud Function logs in the Firebase console.\n        alert(`An error occured: ${error.message}`);\n      }\n\n      if (sessionId) {\n        // We have a session, let's  redirect to checkout\n        // Init Stripe\n\n        const stripe = await loadStripe(\n          \"pk_test_51IHlKcEUFwzFGQj3mLjcue16uyYYQWjgXPDEk1D17clrcLpuqEKvxrhMHgNPlbICFDPBkxCJeplPmaG0iQx5TnEk00dqoUbH3p\"\n        );\n        stripe.redirectToCheckout({ sessionId });\n      }\n    });\n  };\n\n  return (\n    <div className=\"plansScreen\">\n      <br />\n      {subscription && (\n        <p>\n          Renewal date:{\" \"}\n          {new Date(\n            subscription?.current_period_end * 1000\n          ).toLocaleDateString()}\n        </p>\n      )}\n      {Object.entries(products).map(([productId, productData]) => {\n        // add some logic to check if the user's subscription is active.\n        const isCurrentPackage = productData.name\n          ?.toLowerCase()\n          .includes(subscription?.role);\n\n        return (\n          <div\n            key={productId}\n            className={`${\n              isCurrentPackage && \"plansScreen__plan--disabled\"\n            } plansScreen__plan`}\n          >\n            <div className=\"plansScreen__info\">\n              <h5>{productData.name}</h5>\n              <h6>{productData.description}</h6>\n            </div>\n\n            <button\n              onClick={() =>\n                !isCurrentPackage && loadCheckout(productData.prices.priceId)\n              }\n            >\n              {isCurrentPackage ? \"Current Package\" : \"Subscribe\"}\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default PlansScreen;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../features/userSlice\";\nimport { auth } from \"../firebase\";\nimport Nav from \"../Nav\";\nimport \"./ProfileScreen.css\";\nimport PlansScreen from \"./PlansScreen\";\n\nfunction ProfileScreen() {\n  const user = useSelector(selectUser);\n\n  return (\n    <div className=\"profileScreen\">\n      <Nav />\n      <div className=\"profileScreen__body\">\n        <h1>Edit Profile</h1>\n        <div className=\"profileScreen__info\">\n          <img\n            src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n            alt=\"\"\n          />\n          <div className=\"profileScreen__details\">\n            <h2>{user.email}</h2>\n            <div className=\"profileScreen__plans\">\n              <h3>Plans</h3>\n\n              <PlansScreen />\n              <button\n                onClick={() => auth.signOut()}\n                className=\"profileScreen__signOut\"\n              >\n                Sign Out\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ProfileScreen;\n","import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport LoginScreen from \"./screens/LoginScreen\";\r\nimport { auth } from \"./firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login, logout, selectUser } from \"./features/userSlice\";\r\nimport ProfileScreen from \"./screens/ProfileScreen\";\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      if (userAuth) {\r\n        // Logged in\r\n        dispatch(\r\n          login({\r\n            uid: userAuth.uid,\r\n            email: userAuth.email,\r\n          })\r\n        );\r\n      } else {\r\n        // Logged out\r\n        dispatch(logout());\r\n      }\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <LoginScreen />\r\n        ) : (\r\n          <Switch>\r\n            <Route path=\"/profile\">\r\n              <ProfileScreen />\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n              <HomeScreen />\r\n            </Route>\r\n          </Switch>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport userReducer from \"../features/userSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}